/** @jsxImportSource @emotion/react */
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/fonrBdmy5ZO
 */
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card";
import { Toggle } from "@/components/ui/toggle";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
// import Link from "next/link";
import { api } from "@/utils/api";
import { useCallback, useEffect, useState } from "react";
import {
  CheckCircleOutlined,
  // EyeFilled,
  EyeInvisibleOutlined,
  EyeOutlined,
} from "@ant-design/icons";
import { Divider, Form, Modal } from "antd";
import { toast } from "react-toastify";
import { StorageReadItem, storageWriteItem } from "@/utils/localStorage";
// import { SettingsChange } from "../SettingsChange";
import { UsersSearch } from "../UsersSearch";
import { EmotionJSX } from "@emotion/react/types/jsx-namespace";
import { css } from "@emotion/react";
import { TypeSession } from "@/shared/shared_types";
import { useSession } from "next-auth/react";
// import { set } from "zod";

export function PrayerManagement2() {
  const session = useSession();
  const user = session.data?.user as TypeSession["user"];

  const [isAscending, setIsAscending] = useState(false);
  const [showAddressed, setShowAddressed] = useState(false);
  const [search, setSearch] = useState<string | undefined>(undefined);
  const [searchInput, setSearchInput] = useState<string>("");
  const data_requests = api.prayer.getAll.useQuery({
    isAscending,
    showAddressed,
    search,
  });
  const request_prayerSubmit = api.prayer.create.useMutation();
  const request_prayerMarkDone = api.prayer.mark_addressed.useMutation();
  const request_assignUser = api.prayer.assignUser.useMutation();

  const [showSubmitPrayer, setShowSubmitPrayer] = useState(false);
  const [name, setName] = useState<string | undefined>(undefined);
  const [contact, setContact] = useState<string | undefined>(undefined);
  const [request, setRequest] = useState<string | undefined>(undefined);

  const [form_user_add] = Form.useForm();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modal, setModal] = useState<EmotionJSX.Element>();
  const [modalTitle, setModalTitle] = useState<string>();
  const [userAdding, setUserAdding] = useState(false);

  function onSubmit() {
    if (!request) {
      toast.error("Please enter a prayer request");
      return;
    }
    toast
      .promise(
        request_prayerSubmit.mutateAsync({
          name,
          contact,
          request,
        }),
        {
          pending: "Submitting...",
          success: "Prayer request submitted",
          error: "Failed to submit prayer request",
        },
      )
      .then((res) => {
        if (res) {
          toast.success("Prayer request submitted");
          setName(undefined);
          setContact(undefined);
          setRequest(undefined);
          data_requests.refetch();
        } else {
          toast.error("Failed to submit prayer request");
        }
      })
      .catch((err) => {
        toast.error("Failed to submit prayer request");
        console.error(err);
      });
  }
  function onMarkDone({
    id,
    markUnDone,
  }: {
    id: number;
    markUnDone?: boolean;
  }) {
    toast
      .promise(request_prayerMarkDone.mutateAsync({ id, markUnDone }), {
        pending: "Marking as done...",
        success: "Prayer request marked as done",
        error: "Failed to mark prayer request as done",
      })
      .then((res) => {
        if (res) {
          toast.success("Prayer request marked as done");
          data_requests.refetch();
        } else {
          toast.error("Failed to mark prayer request as done");
        }
      })
      .catch((err) => {
        toast.error("Failed to mark prayer request as done");
        console.error(err);
      });
  }
  const modalOpen = useCallback(
    (args: { name: "user_add"; title?: string; id?: number }) => {
      switch (args.name) {
        case "user_add":
          setUserAdding(false);
          if (form_user_add) form_user_add.resetFields();
          setModalTitle(args.title ?? "Add user to role");
          const element = (
            <UsersSearch
              isLoading={userAdding}
              onSelect={async (user) => {
                if (!args.id) {
                  toast.error("Provide prayer id");
                  return;
                }
                setUserAdding(true);
                toast
                  .promise(
                    request_assignUser.mutateAsync({
                      id: args.id,
                      user_id: user.id,
                    }),
                    {
                      pending: "Assigning user...",
                      // success: "Assigned prayer to user",
                      error: "Failed to assign user",
                    },
                  )
                  .then((res) => {
                    if (!res) toast.error("Failed to assign user");
                    toast.success(
                      `Assigned prayer to ${res.user_assigned_to?.wicf_member?.first_name}`,
                    );
                    data_requests.refetch();
                    setModal(undefined);
                    setIsModalOpen(false);
                  })
                  .catch((error) => {
                    toast.error("Failed to assign user");
                    console.error({ error });
                  })
                  .finally(() => {
                    setUserAdding(false);
                  });
              }}
            />
          );
          setModal(element);
          setIsModalOpen(true);
          break;
        default:
      }
    },
    [form_user_add, userAdding],
  );
  function modalClose() {
    setModalTitle(undefined);
    setModal(undefined);
    setIsModalOpen(false);
  }
  useEffect(() => {
    setShowSubmitPrayer(
      (StorageReadItem("prayer_submit_show") as unknown as boolean) === true
        ? true
        : false,
    );
  }, []);
  return (
    <div className="px-4 md:px-6 lg:px-8 py-6 space-y-6 w-full">
      <Modal
        title={modalTitle}
        open={isModalOpen}
        footer={null}
        centered
        onCancel={modalClose}
        css={css({
          background: "transparent",
          ".ant-modal-title": {
            color: "white",
          },
          ".ant-modal-header": {
            background: "transparent",
          },
          ".ant-modal-content": {
            width: "fit-content",
            // width: 320,
            background: "#161E27",
            overflow: "hidden",
          },
        })}
      >
        {modal}
      </Modal>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between w-full">
            <CardTitle>{`Submit Prayer Request`}</CardTitle>
            <Toggle
              aria-label="Show form"
              onClick={() => {
                setShowSubmitPrayer(!showSubmitPrayer);
                storageWriteItem("prayer_submit_show", !showSubmitPrayer);
              }}
            >
              {showSubmitPrayer ? (
                <EyeInvisibleOutlined style={{ fontSize: 22 }} />
              ) : (
                <EyeOutlined style={{ fontSize: 22 }} />
              )}
            </Toggle>
          </div>
        </CardHeader>
        <CardContent
          style={{
            display: showSubmitPrayer === true ? "grid" : "none",
          }}
        >
          <form>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="first-name">{`Full Name`}</Label>
                <Input
                  id="first-name"
                  placeholder="Enter your first name"
                  value={name ?? ""}
                  onChange={(e) => setName(e.target.value)}
                  disabled={request_prayerSubmit.isPending}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="last-name">{`Contact`}</Label>
                <Input
                  id="contact"
                  placeholder="Enter your contact"
                  value={contact ?? ""}
                  onChange={(e) => setContact(e.target.value)}
                  disabled={request_prayerSubmit.isPending}
                />
              </div>
            </div>
            <div className="space-y-2">
              <Label>Prayer Request</Label>
              <Textarea
                disabled={request_prayerSubmit.isPending}
                className="min-h-[100px]"
                id="request"
                placeholder="Enter your prayer request"
                value={request ?? ""}
                onChange={(e) => setRequest(e.target.value)}
              />
            </div>
            <Button
              // isLoading={true}
              style={{ marginTop: 10 }}
              disabled={request_prayerSubmit.isPending}
              onClick={(e) => {
                e.preventDefault();
                onSubmit();
              }}
            >
              {request_prayerSubmit.isPending ? "Submitting..." : "Submit"}
            </Button>
          </form>
        </CardContent>
      </Card>
      <div className="space-y-2">
        <h1 className="text-3xl font-bold">
          Prayer Requests{data_requests.isLoading ? ` (Loading...)` : ""}
        </h1>
        <p className="text-gray-500 dark:text-gray-400">
          Manage Prayer requests. You can also search existing requests or mark
          them as done.
        </p>
      </div>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between w-full">
            <CardTitle>Search requests</CardTitle>
            <Button
              size="sm"
              onClick={() => setShowAddressed(!showAddressed)}
            >{`${showAddressed ? "Hide Done" : "Show Done"}`}</Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4">
            <Label className="sr-only" htmlFor="search">
              Search
            </Label>
            <Input
              className="max-w-xs flex-1"
              id="search"
              placeholder="Search by name or request..."
              value={searchInput}
              onChange={(e) => setSearchInput(e.target.value)}
            />
            <Button
              className="w-full md:w-20 mt-4 md:mt-0"
              type="submit"
              onClick={() => {
                setSearch(searchInput === "" ? undefined : searchInput);
              }}
            >
              Search
            </Button>
            {searchInput?.length > 0 ? (
              <Button
                className="w-full md:w-20 mt-4 md:mt-0 bg-black dark:bg-black dark:text-white"
                onClick={() => {
                  setSearchInput("");
                  setSearch(undefined);
                }}
              >
                {searchInput?.length > 0 ? "Clear" : null}
              </Button>
            ) : null}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between w-full">
            <CardTitle>{`Assigned to  Me`}</CardTitle>
            <Button
              size="sm"
              onClick={() => setIsAscending(!isAscending)}
            >{`Sort: ${isAscending ? "Oldest" : "Latest"}`}</Button>
          </div>
        </CardHeader>
        <CardContent
          style={{
            display: "grid",
            gap: 10,
          }}
        >
          {data_requests.data
            ?.filter((req) => req.userId_assigned_to === user.id)
            .map((request, index) => (
              <div className="space-y-4" key={index}>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col">
                    <div className="font-semibold">
                      {request.name ?? "[Anonymous]"}{" "}
                      {request.is_addressed ? <CheckCircleOutlined /> : null}
                    </div>
                    <div className="text-sm">
                      {request.contact_info
                        ? `Contact: ${request.contact_info}`
                        : null}
                    </div>
                    <div className="text-sm">
                      {request.userId_assigned_to
                        ? `Assigned to: ${request.user_assigned_to?.email}`
                        : null}
                    </div>
                    <div className="text-sm text-gray-500 dark:text-gray-400">
                      {!request.completion_time
                        ? null
                        : new Date(
                          request.completion_time as unknown as string,
                        ).toLocaleString()}
                    </div>
                  </div>
                </div>
                <div className="text-sm leading-relaxed text-gray-500 dark:text-gray-400">
                  {request.request}
                </div>
                <div className="flex items-center space-x-2">
                  <Button
                    className="p-2"
                    size="sm"
                    disabled={request_prayerMarkDone.isPending}
                    onClick={() => {
                      onMarkDone({
                        id: request.id,
                        markUnDone: request.is_addressed ? true : false,
                      });
                    }}
                  >
                    {request.is_addressed ? `Mark as Undone` : `Mark as Done`}
                  </Button>
                  <Button
                    className="p-2"
                    size="sm"
                    onClick={() => {
                      // form_user_add.setFieldValue("id", request.id);
                      modalOpen({
                        name: "user_add",
                        title: `Add user to Prayer Request`,
                        id: request.id,
                      });
                    }}
                  >
                    Assign person
                  </Button>
                </div>
                <Divider style={{ fontSize: 5, borderColor: "grey" }} />
              </div>
            ))}
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between w-full">
            <CardTitle>{`All Prayer Requests`}</CardTitle>
            <Button
              size="sm"
              onClick={() => setIsAscending(!isAscending)}
            >{`Sort: ${isAscending ? "Oldest" : "Latest"}`}</Button>
          </div>
        </CardHeader>
        <CardContent
          style={{
            display: "grid",
            gap: 10,
          }}
        >
          {data_requests.data?.map((request, index) => (
            <div className="space-y-4" key={index}>
              <div className="flex items-center justify-between">
                <div className="flex flex-col">
                  <div className="font-semibold">
                    {request.name ?? "[Anonymous]"}{" "}
                    {request.is_addressed ? <CheckCircleOutlined /> : null}
                  </div>
                  <div className="text-sm">
                    {request.contact_info
                      ? `Contact: ${request.contact_info}`
                      : null}
                  </div>
                  {/* <div className="text-sm">
                    {request.userId_assigned_to
                      ? `Assigned to: ${
                          request.user_assigned_to?.first_name
                            ? request.user_assigned_to?.first_name +
                              " " +
                              request.user_assigned_to?.last_name
                            : request.user_assigned_to?.wicf_member
                                ?.first_name +
                              " " +
                              request.user_assigned_to?.last_name
                        }`
                      : null}
                  </div> */}
                  <div className="text-sm">
                    {request.userId_assigned_to
                      ? `Assigned to: ${request.user_assigned_to?.email}`
                      : null}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">
                    {!request.completion_time
                      ? null
                      : new Date(
                        request.completion_time as unknown as string,
                      ).toLocaleString()}
                  </div>
                </div>
                {/* <Link
                  className="text-sm underline underline-offset-2 ml-auto"
                  href="#"
                >
                  View
                </Link> */}
              </div>
              <div className="text-sm leading-relaxed text-gray-500 dark:text-gray-400">
                {request.request}
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  className="p-2"
                  size="sm"
                  disabled={request_prayerMarkDone.isPending}
                  onClick={() => {
                    onMarkDone({
                      id: request.id,
                      markUnDone: request.is_addressed ? true : false,
                    });
                  }}
                >
                  {request.is_addressed ? `Mark as Undone` : `Mark as Done`}
                </Button>
                <Button
                  className="p-2"
                  size="sm"
                  onClick={() => {
                    // form_user_add.setFieldValue("id", request.id);
                    modalOpen({
                      name: "user_add",
                      title: `Add user to Prayer Request`,
                      id: request.id,
                    });
                  }}
                >
                  Assign person
                </Button>
              </div>
              <Divider style={{ fontSize: 5, borderColor: "grey" }} />
            </div>
          ))}
        </CardContent>
      </Card>
    </div>
  );
}
